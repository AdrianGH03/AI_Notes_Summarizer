Q What is FastAPI?
- FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.
- It is built on top of Starlette for the web parts and Pydantic for the data parts.

Q Why Django or Flask over FastAPI?
- Django is for building web applications with a lot of built-in features like ORM, authentication, and admin interface.
- Flask is for building web applications with a minimalistic approach, allowing developers to choose their own components.
- FastAPI is for building APIs with a focus on performance and ease of use, especially for asynchronous programming. (i.e. high users and low latency)

Q How to install FastAPI?
- pip install fastapi
- if you run msys, put python path above msys path to avoid conflicts.

Q How do you run a FastAPI application using a command?
- Use the command: uvicorn main:api --reload
- Here, `main` is the name of the Python file (without the .py extension), and `api` is the FastAPI instance created in that file.
- The `--reload` option enables auto-reloading of the server when code changes are detected
- or fastapi dev main.py 

Q asynchronous vs synchronous
- synchronous is independent
- asynchronous is dependent

Q How to pass a path parameter in FastAPI?
- Use the `@app.get("/items/{item_id}")` decorator to define a path parameter.
- The `item_id` will be passed as a parameter to the function that handles the request

Q How should you go about validating data types in FastAPI?
- FastAPI uses Pydantic for data validation and serialization.
- You can define Pydantic models with type annotations, and FastAPI will automatically validate the data against these models.
- For example, a path parameter can be defined as `item_id: int` to ensure it is an integer.

Q How do you open a FastAPI frontend to send requests to the backend?
- Take the URL of the FastAPI application (e.g., http://localhost:8000) and add `/docs` to it (e.g., http://localhost:8000/docs).
- This will open the interactive API documentation provided by FastAPI, where you can send requests to the backend endpoints.
- or just use postman

Q What is BaseModel and Field from pydantic?
- `BaseModel` is a class from Pydantic that allows you to define data models with type annotations.
- `Field` is used to provide additional metadata for model fields, such as default values, validation constraints, and descriptions.

Q How do you raise an HTTPException in FastAPI?
- You can raise an `HTTPException` by importing it from `fastapi` and using
- ex. raise HTTPException(status_code=404, detail="Item not found")